/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/auth/identity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the current user's identity, tenant, and databases. */
        get: operations["get_user_identity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/healthcheck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check endpoint that returns 200 if the server and executor are ready */
        get: operations["healthcheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/heartbeat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Heartbeat endpoint that returns a nanosecond timestamp of the current time. */
        get: operations["heartbeat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/pre-flight-checks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Pre-flight checks endpoint reporting basic readiness info. */
        get: operations["pre_flight_checks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset endpoint allowing authorized users to reset the database. */
        post: operations["reset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Creates a new tenant. */
        post: operations["create_tenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns an existing tenant by name. */
        get: operations["get_tenant"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists all databases for a given tenant. */
        get: operations["list_databases"];
        put?: never;
        /** Creates a new database for a given tenant. */
        post: operations["create_database"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific database by name. */
        get: operations["get_database"];
        put?: never;
        post?: never;
        /** Deletes a specific database. */
        delete: operations["delete_database"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists all collections in the specified database. */
        get: operations["list_collections"];
        put?: never;
        /** Creates a new collection under the specified database. */
        post: operations["create_collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a collection by ID or name. */
        get: operations["get_collection"];
        /** Updates an existing collection's name or metadata. */
        put: operations["update_collection"];
        post?: never;
        /** Deletes a collection in a given database. */
        delete: operations["delete_collection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds records to a collection. */
        post: operations["collection_add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the number of records in a collection. */
        get: operations["collection_count"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deletes records in a collection. Can filter by IDs or metadata. */
        post: operations["collection_delete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Retrieves records from a collection by ID or metadata filter. */
        post: operations["collection_get"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query a collection in a variety of ways, including vector search, metadata filtering, and full-text search */
        post: operations["collection_query"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates records in a collection by ID. */
        post: operations["collection_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections/{collection_id}/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upserts records in a collection (create if not exists, otherwise update). */
        post: operations["collection_upsert"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/tenants/{tenant}/databases/{database}/collections_count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the total number of collections in a given database. */
        get: operations["count_collections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the version of the server. */
        get: operations["version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddCollectionRecordsPayload: {
            documents?: (string | null)[] | null;
            embeddings?: number[][] | null;
            ids: string[];
            metadatas?: (null | components["schemas"]["HashMap"])[] | null;
            uris?: (string | null)[] | null;
        };
        AddCollectionRecordsResponse: Record<string, never>;
        ChecklistResponse: {
            /** Format: int32 */
            max_batch_size: number;
        };
        Collection: {
            collection_id: components["schemas"]["CollectionUuid"];
            configuration_json?: unknown;
            database: string;
            /** Format: int32 */
            dimension?: number | null;
            /** Format: int64 */
            log_position: number;
            metadata?: null | components["schemas"]["HashMap"];
            name: string;
            tenant: string;
            /** Format: int32 */
            version: number;
        };
        /**
         * Format: uuid
         * @description CollectionUuid is a wrapper around Uuid to provide a type for the collection id.
         */
        CollectionUuid: string;
        CreateCollectionPayload: {
            configuration?: unknown;
            get_or_create: boolean;
            metadata?: null | components["schemas"]["HashMap"];
            name: string;
        };
        CreateDatabasePayload: {
            name: string;
        };
        CreateDatabaseResponse: Record<string, never>;
        CreateTenantPayload: {
            name: string;
        };
        CreateTenantResponse: Record<string, never>;
        Database: {
            /** Format: uuid */
            id: string;
            name: string;
            tenant: string;
        };
        DeleteCollectionRecordsPayload: components["schemas"]["RawWhereFields"] & {
            ids?: string[] | null;
        };
        DeleteCollectionRecordsResponse: Record<string, never>;
        DeleteDatabaseResponse: Record<string, never>;
        ErrorResponse: {
            error: string;
            message: string;
        };
        GetRequestPayload: components["schemas"]["RawWhereFields"] & {
            ids?: string[] | null;
            include?: components["schemas"]["IncludeList"];
            /** Format: int32 */
            limit?: number | null;
            /** Format: int32 */
            offset?: number | null;
        };
        GetResponse: {
            documents?: (string | null)[] | null;
            embeddings?: number[][] | null;
            ids: string[];
            include: components["schemas"]["Include"][];
            metadatas?: (null | components["schemas"]["HashMap"])[] | null;
            uris?: (string | null)[] | null;
        };
        GetTenantResponse: {
            name: string;
        };
        GetUserIdentityResponse: {
            databases: string[];
            tenant: string;
            user_id: string;
        };
        HashMap: {
            [key: string]: boolean | number | string;
        };
        HeartbeatResponse: {
            nanosecond_heartbeat: number;
        };
        /** @enum {string} */
        Include: "distances" | "documents" | "embeddings" | "metadatas" | "uris";
        IncludeList: components["schemas"]["Include"][];
        QueryRequestPayload: components["schemas"]["RawWhereFields"] & {
            ids?: string[] | null;
            include?: components["schemas"]["IncludeList"];
            /** Format: int32 */
            n_results?: number | null;
            query_embeddings: number[][];
        };
        QueryResponse: {
            distances?: (number | null)[][] | null;
            documents?: (string | null)[][] | null;
            embeddings?: (number[] | null)[][] | null;
            ids: string[][];
            include: components["schemas"]["Include"][];
            metadatas?: (null | components["schemas"]["HashMap"])[][] | null;
            uris?: (string | null)[][] | null;
        };
        RawWhereFields: {
            where?: unknown;
            where_document?: unknown;
        };
        UpdateCollectionPayload: {
            new_metadata?: null | components["schemas"]["HashMap"];
            new_name?: string | null;
        };
        UpdateCollectionRecordsPayload: {
            documents?: (string | null)[] | null;
            embeddings?: (number[] | null)[] | null;
            ids: string[];
            metadatas?: (null | components["schemas"]["HashMap"])[] | null;
            uris?: (string | null)[] | null;
        };
        UpdateCollectionRecordsResponse: Record<string, never>;
        UpdateCollectionResponse: Record<string, never>;
        UpsertCollectionRecordsPayload: {
            documents?: (string | null)[] | null;
            embeddings?: number[][] | null;
            ids: string[];
            metadatas?: (null | components["schemas"]["HashMap"])[] | null;
            uris?: (string | null)[] | null;
        };
        UpsertCollectionRecordsResponse: Record<string, never>;
        Vec: {
            collection_id: components["schemas"]["CollectionUuid"];
            configuration_json?: unknown;
            database: string;
            /** Format: int32 */
            dimension?: number | null;
            /** Format: int64 */
            log_position: number;
            metadata?: null | components["schemas"]["HashMap"];
            name: string;
            tenant: string;
            /** Format: int32 */
            version: number;
        }[];
        /** Format: int32 */
        u32: number;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_user_identity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get user identity */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserIdentityResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    healthcheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    heartbeat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeartbeatResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    pre_flight_checks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pre flight checks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChecklistResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    reset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reset successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": boolean;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTenantPayload"];
            };
        };
        responses: {
            /** @description Tenant created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTenantResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_tenant: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant name or ID to retrieve */
                tenant_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tenant found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTenantResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Tenant not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_databases: {
        parameters: {
            query?: {
                /** @description Limit for pagination */
                limit?: number;
                /** @description Offset for pagination */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description Tenant ID to list databases for */
                tenant: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of databases */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vec"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_database: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID to associate with the new database */
                tenant: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDatabasePayload"];
            };
        };
        responses: {
            /** @description Database created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDatabaseResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_database: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Name of the database to retrieve */
                database: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Database retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Database"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Database not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_database: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Name of the database to delete */
                database: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Database deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDatabaseResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Database not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_collections: {
        parameters: {
            query?: {
                /** @description Limit for pagination */
                limit?: number;
                /** @description Offset for pagination */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name to list collections from */
                database: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of collections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vec"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_collection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name containing the new collection */
                database: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCollectionPayload"];
            };
        };
        responses: {
            /** @description Collection created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Collection"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_collection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name */
                database: string;
                /** @description UUID of the collection */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collection found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Collection"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_collection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name */
                database: string;
                /** @description UUID of the collection to update */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCollectionPayload"];
            };
        };
        responses: {
            /** @description Collection updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCollectionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_collection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name */
                database: string;
                /** @description UUID of the collection to delete */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collection deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCollectionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    collection_add: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tenant: string;
                database: string;
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCollectionRecordsPayload"];
            };
        };
        responses: {
            /** @description Collection added successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddCollectionRecordsResponse"];
                };
            };
            /** @description Invalid data for collection addition */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    collection_count: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID for the collection */
                tenant: string;
                /** @description Database containing this collection */
                database: string;
                /** @description Collection ID whose records are counted */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Number of records in the collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["u32"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    collection_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name */
                database: string;
                /** @description Collection ID */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCollectionRecordsPayload"];
            };
        };
        responses: {
            /** @description Records deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteCollectionRecordsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    collection_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name for the collection */
                database: string;
                /** @description Collection ID to fetch records from */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetRequestPayload"];
            };
        };
        responses: {
            /** @description Records retrieved from the collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    collection_query: {
        parameters: {
            query?: {
                /** @description Limit for pagination */
                limit?: number;
                /** @description Offset for pagination */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name containing the collection */
                database: string;
                /** @description Collection ID to query */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequestPayload"];
            };
        };
        responses: {
            /** @description Records matching the query */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    collection_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tenant: string;
                database: string;
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCollectionRecordsPayload"];
            };
        };
        responses: {
            /** @description Collection updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateCollectionRecordsResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    collection_upsert: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name */
                database: string;
                /** @description Collection ID */
                collection_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertCollectionRecordsPayload"];
            };
        };
        responses: {
            /** @description Records upserted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpsertCollectionRecordsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    count_collections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tenant ID */
                tenant: string;
                /** @description Database name to count collections from */
                database: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count of collections */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["u32"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get server version */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
